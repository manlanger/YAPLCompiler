<project name="YAPL Compiler - Backend Testing" default="compile-java" basedir=".">
	<description>
ANT build file for the YAPL compiler, backend testing programs.
M. Taschwer, March 2016
	</description>
	
    <!-- customize to your environment -->
	<property name="globalbasedir" location="../../../../.."/>
	<property name="src" location="${globalbasedir}/src"/>
	<property name="build" location="${globalbasedir}/ant-bin"/>
    <property name="ant-contrib-jar" location="${globalbasedir}/lib/ant-contrib.jar"/>
    <property name="mj-jar" location="${globalbasedir}/mjvm/mj.jar"/>
    
    <!-- list of Java test classes -->
    <property name="testclasses" value="Test1,Test2,Test3,Test4,Test5,Test6"/>
    
    <!-- properties for invoking 'eval' target directly -->
    <property name="mainclass" value="yapl.test.backend.sm.Test1"/>
    <property name="outfile" location="Test1.mj"/>
    <property name="runtimeoutput" location="Test1.txt"/>
    <property name="truefile" location="Test1.true"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant-contrib-jar}"/>
	
	<target name="init">
		<mkdir dir="${build}" />
	</target>

	<target name="compile-java" depends="init"
        description="compile the sources" >
		<javac srcdir="${src}" destdir="${build}" debug="on" includeantruntime="false">
			<include name="yapl/impl/*.java"/>
			<include name="yapl/interfaces/*.java"/>
			<include name="yapl/test/backend/sm/*.java"/>
		</javac>
	</target>

	<target name="run-backend" depends="compile-java" 
		description="runs 'mainclass' with argument 'outfile' (given by properties).">
		<java classname="${mainclass}">
			<classpath>
				<pathelement location="${build}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
			<arg value="${outfile}"/>
		</java>
	</target>

	<target name="run-mj" depends="run-backend" 
		description="executes generated code 'outfile', writing output to 'runtimeoutput'">
		<java classname="MJ.Run" classpath="${mj-jar}" fork="true" output="${runtimeoutput}">
			<arg value="${outfile}"/>
		</java>
	    <echo>Wrote output to ${runtimeoutput}</echo>
	</target>
    
	<target name="eval" depends="run-mj" 
		description="evaluate 'outfile' generated by 'mainclass', by comparing 'runtimeoutput' to 'truefile'">
		<fail message="output file is not correct: ${runtimeoutput}">
			<condition>
				<not>
					<filesmatch file1="${runtimeoutput}" file2="${truefile}" textfile="true"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="eval-all" description="evaluate all test cases">
		<var name="npassed" value="0"/>
        <var name="ntotal" value="0"/>
		<for param="testname" list="${testclasses}">
			<sequential>
				<trycatch>
					<try>
						<antcall target="eval">
					        <param name="mainclass" value="yapl.test.backend.sm.@{testname}"/>
					        <param name="outfile" location="@{testname}.mj"/>
							<param name="runtimeoutput" location="@{testname}.txt"/>
							<param name="truefile" location="@{testname}.true"/>
						</antcall>
						<echo>@{testname}: PASSED</echo>
						<math result="npassed" operand1="${npassed}" operation="+" operand2="1" datatype="int"/>
					</try>
					<catch>
						<echo>@{testname}: FAILED</echo>
					</catch>
				</trycatch>
                <math result="ntotal" operand1="${ntotal}" operation="+" operand2="1" datatype="int"/>
			</sequential>
		</for>
		<echo>Tests passed: ${npassed}/${ntotal}</echo>
	</target>
	
	<target name="clean" description="remove generated files">
		<delete>
			<fileset dir="." includes="*.mj *.txt" />
		</delete>
	</target>
	
</project>
