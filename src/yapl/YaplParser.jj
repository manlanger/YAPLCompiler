/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(YaplParser)

package yapl;

import yapl.interfaces.*;
import yapl.lib.CompilerMessage;
import yapl.lib.YAPLException;
import yapl.compiler.ParseException;
import yapl.compiler.TokenMgrError;
import yapl.lib.Type;
import yapl.impl.*;
import yapl.types.*;

public class YaplParser
{
    private static String programName = "";
    private static Symboltable symbolTable = new SymbolTableImpl();
    private static CodeGen codeGen = new CodeGenImpl();
    private static final String predefinedProcedures = "Procedure void writeint(int i);Procedure void writebool(bool b);Procedure void writeln();Procedure int readint();";

  	public static void main(String args []) throws ParseException
  	{
      	YaplParser parser = null;

      	// init predefined procedures
      	try {
      		parser = new YaplParser(new java.io.StringReader(predefinedProcedures));
      		parser.PreDefinedProcedures();
      	} catch(Throwable e) {
	        System.out.println ("Predefined procedure init failed! " + e.getMessage());
			return;
	    }

	    if(args.length == 0){
	    	System.out.println ("YaplParser: Reading input ...");
	    	parser = new YaplParser(System.in);
	    }
	    else if(args.length == 1){
	        try {
	          parser.ReInit(new java.io.FileInputStream(args[0]));
	          //System.out.println ("YaplParser: Reading the file " + args[0] + " ..." );
	        } catch(java.io.FileNotFoundException e) {
	        	System.out.println ("ExampleParser: The file " + args[0] + " was not found.");
	        	return;
	        }
	    }

		if (parser == null) {
		  	System.out.println ("Parser initialization failed!");
		} else {
		    try {
		        parser.Start();
		        CompilerMessage.printOK(programName);
		    }catch (Throwable e)
		    {
		        e.printStackTrace();
                CompilerMessage.printError((CompilerError) e, programName);
		    }
		}
  	}
}

PARSER_END(YaplParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

SPECIAL_TOKEN :
{
  <COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/"> |
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

/*
Symbols
*/
TOKEN :
{
  < HASH : "#" >
| < PERC : "%" >
| < LEFTPAR : "(" >
| < RIGHTPAR : ")" >
| < MULT : "*" >
| < PLUS : "+" >
| < COMMA : "," >
| < MINUS : "-" >
| < DOT : "." >
| < SLASH : "/" >
| < LESSTHAN : "<" >
| < GREATERTHAN : ">" >
| < LEFTBRACKET : "[" >
| < RIGHTBRACKET : "]" >
| < OR : "Or" >
| < AND : "And" >
| < INT : "int" >
| < NEW : "new" >
| < TRUE : "True" >
| < FALSE : "False" >
| < BOOL : "bool" >
| < IF : "If" >
| <SEMICOLOM : ";" >
| <WHILE : "While" >
| <VOID : "void" >
| <ELSE : "Else" >
| <END : "End" >
| <WRITE : "Write" >
| <PROGRAM : "Program" >
| <DECLARE: "Declare" >
| <EQUALS: "=" >
| <CONST: "Const">
| <PROCEDURE: "Procedure" >
| <BEGIN: "Begin" >
| <RETURN: "Return" >
| <COLOMEQUALS: ":=">
| <DO:"Do">
| <THEN:"Then">
| <ENDIF:"EndIf" >
| <RECORD:"Record" >
| <ENDRECORD:"EndRecord" >
| <ENDWHILE: "EndWhile" >
}

/*
letter = "A" .. "Z" | "a" .. "z" | "_" .
digit = "0" .. "9" .
otherchar = "+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!"
| "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")"
| "[" | "]" | "{" | "}" | "\" | "@" | "&" | "^" | "|" .
ident = letter { letter | digit } .
number = digit { digit } .
string = '"' { " " | letter | digit | otherchar } '"' .
*/

TOKEN :
{
  < #LETTER : (["A"-"Z","a"-"z","_"]) >
| < #DIGIT : [ "0"-"9" ] >
| < OTHERCHAR : "+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!" | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")" | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|" >
| < IDENT : < LETTER > ( < LETTER > | < DIGIT > )* >
| < NUMBER : < DIGIT > ( < DIGIT > )* >
| < STRING : "\"" ( " " | < LETTER > | < DIGIT > | < OTHERCHAR > )* "\"" > 
}

/*
RelOp = "<" | "<=" | ">=" | ">" .
EqualOp = "==" | "!=" .
AddOp = "+" | "-" .
MulOp = "*" | "/" | "%" .
*/

Token RelOp() :
{
	Token token;
}
{
  	( token = "<" | token = "<=" | token = ">=" | token = ">" )
  	{
		return token;
	}
}

Token EqualOp() :
{
	Token token;
}
{
  	( token = "==" | token = "!=" )
    {
		return token;
	}
}

Token AddOp() :
{
	Token token;
}
{
  	( token = "+" | token = "-" )
  	{
  		return token;
  	}
}

Token MulOp() :
{
	Token token;
}
{
  	( token = "*" | token = "/" | token = "%" )
  	{
    	return token;
  	}
}

/*
Literal = "True" | "False" | number .
Selector = ( "[" Expr "]" | "." ident ) [ Selector ] .
ArrayLen = "#" ident [ Selector ] .
*/

Attrib Literal() :
{
	Token token;
	Attrib attrib;
}
{
  	<TRUE>
	{
	  	attrib = new AttribImpl(Attrib.Constant, new BoolType(true));
		return attrib;
	}
	
	| <FALSE>
	{
		attrib = new AttribImpl(Attrib.Constant, new BoolType(false));
		return attrib;
	}
		
	| token = <NUMBER>
	{
	 	attrib = new AttribImpl(Attrib.Constant, new IntType(Integer.parseInt(token.image)));
	  	return attrib;
	}
}

Attrib Selector(Attrib a) throws YAPLException:
{
 	Token token2, dot;
	Attrib index = null, attrib = null;
	boolean opensRecordScope = false;
	if(a.getType() instanceof RecordType)
    {
        RecordType rType = (RecordType) a.getType();
         symbolTable.openScope(false);
         symbolTable.setParentSymbol(rType.getRecordSymbol());
         opensRecordScope = true;
    }
}
{
  	( token2 = "[" index = Expr() "]"
  	{
  	  	try { 
			codeGen.arrayOffset(a, index);

			attrib = new AttribImpl(Attrib.ArrayElement, ((ArrayType)a.getType()).getElementType());
			
		} catch (YAPLException e) {
		  	throw new YAPLException("expression before " + token.image + " is not an array type", CompilerError.SelectorNotArray, token);
		}
  	} | dot = "." token2 = <IDENT>
  	{
  		if (!(a.getType() instanceof RecordType)) {
  			throw new YAPLException("expression before " + dot.image + " is not a record type", CompilerError.SelectorNotRecord, token);
  		} else
        {
            Symbol field = symbolTable.lookup(token2.image);
             if(field == null)
             {
                 throw new YAPLException("invalid field "+ token2.image +" of record Stat", CompilerError.InvalidRecordField, token2);
             }
            attrib = new AttribImpl(field.getType());
        }
  	}
  	)
  	[
    attrib = Selector(attrib)
  	{
  	  	//attrib = new AttribImpl(Attrib.ArrayElement, a.getType());
  	} ]
  	{
  	  	if (index != null) { 
	  	  	if (!(index.getType() instanceof IntType)) {
	  		  	throw new YAPLException("array index or dimension is not an integer type", CompilerError.BadArraySelector, token2);
	  		}

	  	}
  	  	if(opensRecordScope)
        {
            opensRecordScope = false;
            symbolTable.closeScope();
        }
        return attrib;
  	}
}

Attrib ArrayLen() throws YAPLException:
{
	Token ht, token;
	Attrib attrib;
	Attrib childAttrib;
}
{
  	ht = "#" token = <IDENT>
  	{
		Symbol symbol = symbolTable.lookup(token.image);
		attrib = new AttribImpl(symbol);
  		
    	if (symbol == null) {
    		throw new YAPLException("identifier " + token.image + " not declared", CompilerError.IdentNotDecl, token);
    	}

    	if (symbol.getKind() == Symbol.Constant) {
    	  	throw new YAPLException("illegal use of constant " + symbol.getName(), CompilerError.SymbolIllegalUse, token);
    	}

    	if (symbol.getKind() == Symbol.Procedure) {
    	  	throw new YAPLException("illegal use of procedure " + symbol.getName(), CompilerError.SymbolIllegalUse, token);
    	}

    	if (!(symbol.getType() instanceof ArrayType)) {
    		throw new YAPLException("expression after " + ht.image + " is not an array type", CompilerError.ArrayLenNotArray, token);
    	}

  	} [ attrib = Selector(attrib) ]
  	{
        System.out.println("Hello World");
        if(!(attrib.getType() instanceof ArrayType))
        {
            throw new YAPLException("expression after " + ht.image + " is not an array type", CompilerError.ArrayLenNotArray, token);
        }
  		return codeGen.arrayLength(attrib);
  	}
}

/*
PrimaryExpr = Literal | "(" Expr ")" | ProcedureCall | ident [ Selector ] | ArrayLen .
UnaryExpr = [AddOp] PrimaryExpr .
MulExpr = UnaryExpr { MulOp UnaryExpr } .
AddExpr = MulExpr { AddOp MulExpr } .
RelExpr = AddExpr [ RelOp AddExpr ] .
*/

Attrib PrimaryExpr() throws YAPLException:
{
	Token token;
	Attrib attrib = null;
}
{
	( attrib = Literal() | "(" attrib = Expr() ")" | LOOKAHEAD(2) attrib = ProcedureCall(true)	| token = <IDENT>
  	{
  		Symbol symbol = symbolTable.lookup(token.image);
  		attrib = new AttribImpl(symbol);
  		
    	if (symbol == null) {
    		throw new YAPLException("identifier " + token.image + " not declared", CompilerError.IdentNotDecl, token);
    	}

    	if (symbol.getKind() == Symbol.Procedure) {
    	  	throw new YAPLException("illegal use of procedure " + symbol.getName(), CompilerError.SymbolIllegalUse, token);
    	}


  	}
  	[ attrib = Selector(attrib) ] | attrib = ArrayLen() )
  	{

  		return attrib;
  	}
}

Attrib UnaryExpr() throws YAPLException:
{
  	Token op = null;
	Attrib attrib;
}
{
  	[ op = AddOp() ] attrib = PrimaryExpr()
  	{
  	  	codeGen.op1(op, attrib);
		return attrib;
  	}
}

Attrib MulExpr() throws YAPLException:
{
	Attrib a1, a2;
	Token op;
}
{
  	a1 = UnaryExpr() ( op = MulOp() a2 = UnaryExpr()
  	{
  		a1 = codeGen.op2(a1, op, a2);
  	} )*
  	{
  		return a1;
  	}
}

Attrib AddExpr() throws YAPLException:
{  
	Attrib a1, a2;
	Token op;
}
{
  	a1 = MulExpr() ( op = AddOp() a2 = MulExpr()
  	{
  		a1 = codeGen.op2(a1, op, a2);
  	} )*
  	{
  		return a1;
  	}
}

Attrib RelExpr() throws YAPLException:
{
  	Attrib a1, a2;
	Token op;
}
{
  	a1 = AddExpr() [ op = RelOp() a2 = AddExpr()
  	{
  		a1 = codeGen.relOp(a1, op, a2);
  	} ]
  	{
  		return a1;
  	}
}

/*
EqualExpr = RelExpr [ EqualOp RelExpr ] .
CondAndExpr = EqualExpr { "And" EqualExpr } .
CreationExpr = "new" NonArrayType { "[" Expr "]" } .
Expr = CondAndExpr { "Or" CondAndExpr } | CreationExpr .
*/

Attrib EqualExpr() throws YAPLException:
{
   	Attrib a1, a2;
	Token op;
}
{
	a1 = RelExpr() [ op = EqualOp() a2 = RelExpr()
	{
		a1 = codeGen.equalOp(a1, op, a2);
	} ]
	{
		return a1;
	}
}

Attrib CondAndExpr() throws YAPLException:
{
	Attrib a1, a2;
}
{
  	a1 = EqualExpr() ( "And" a2 = EqualExpr() )*
  	{
  		return a1;
  	}
}

Attrib CreationExpr() throws YAPLException:
{
  	Attrib index, attrib;
  	Type type;
  	Token token;
}
{
  	token = "new" type = NonArrayType()
  	( token = "[" index = Expr() "]"
  	{
  		if (!(index.getType() instanceof IntType)) {
  			throw new YAPLException("bad array selector " + index, CompilerError.BadArraySelector, token);
  		}
  		type = new ArrayType(type);
  	}
  	)*
  	{
        if(type instanceof IntType || type instanceof BoolType)
        {
            throw new YAPLException("invalid type used with 'new'", CompilerError.InvalidNewType, token);
        }
  	  	attrib = new AttribImpl(Attrib.ArrayElement, type);
  		return attrib;
  	}
}

Attrib Expr() throws YAPLException:
{
	Attrib a1, a2;
	Token token;
}
{
  	( a1 = CondAndExpr()  ( token = "Or" a2 = CondAndExpr()
  	{
  		if (!((a1.getType() instanceof BoolType) && (a2.getType() instanceof BoolType)))
  		{
  			throw new YAPLException("illegal operand types for binary operator Or", CompilerError.IllegalOp2Type, token);
  		}
  	}
  	)* | a1 = CreationExpr())
  	{
  		return a1;
  	}
}

/*
ArgumentList = Expr { "," Expr } .
ProcedureCall = ident "(" [ ArgumentList ] ")" .
*/

int ArgumentList(Symbol procSymbol) throws YAPLException:
{
    Symbol nextSymbol = procSymbol.getNextSymbol();
    Attrib attrib;
    Attrib paraAttrib;
    int counter = 0;
}
{
  attrib = Expr()
  {
    counter++;
    if(nextSymbol == null || nextSymbol.getKind() != Symbol.Parameter)
    {
    String msg = String.format("argument #%s not applicable to procedure %s", counter, procSymbol.getName());
        throw new YAPLException(msg, CompilerError.ArgNotApplicable, token);
    }
    paraAttrib = new AttribImpl(nextSymbol.getType());
    if(!paraAttrib.getType().equals(attrib.getType()))
    {
         String msg = String.format("argument #%s not applicable to procedure %s", counter, procSymbol.getName());
        throw new YAPLException(msg, CompilerError.ArgNotApplicable, token);
    }
  }
  ( "," attrib = Expr()
  {
    nextSymbol = nextSymbol.getNextSymbol();
    counter++;
    if(nextSymbol == null || nextSymbol.getKind() != Symbol.Parameter)
        {
        String msg = String.format("argument #%s not applicable to procedure %s", counter, procSymbol.getName());
            throw new YAPLException(msg, CompilerError.ArgNotApplicable, token);
        }
        paraAttrib = new AttribImpl(nextSymbol.getType());
        if(!paraAttrib.getType().equals(attrib.getType()))
            {
                 String msg = String.format("argument #%s not applicable to procedure %s", counter, procSymbol.getName());
                throw new YAPLException(msg, CompilerError.ArgNotApplicable, token);
            }
  }
  )*
  {
    return counter;
  }
}

Attrib ProcedureCall(boolean isFunction) throws YAPLException:
{
	Token token;
	Attrib attrib;
	int paraCount = 0;
	int expectedParams = 0;
}
{
  	token = <IDENT>
  	{
		Symbol symbol = symbolTable.lookup(token.image);
		attrib = new AttribImpl(symbol.getType());

    	if (symbol == null) {
    		throw new YAPLException("identifier " + token.image + " not declared", CompilerError.IdentNotDecl, token);
    	}

    	if (symbol.getKind() != Symbol.Procedure) {
    	  	throw new YAPLException("illegal use of variable " + token.image, CompilerError.SymbolIllegalUse, token);
    	}

    	if (isFunction && (symbol.getType() instanceof VoidType)) {
		  	throw new YAPLException("using procedure " + symbol.getName() + " (not a function) in expression", CompilerError.ProcNotFuncExpr, token); 
		}
    	paraCount = 0;

    	if(symbol != null)
        {
            Symbol nextSymbol = symbol.getNextSymbol();


            while(nextSymbol != null && nextSymbol.getKind() == Symbol.Parameter)
            {
                nextSymbol = nextSymbol.getNextSymbol();
                expectedParams++;
            }
        }


  	} "(" [ paraCount = ArgumentList(symbol) ] token = ")"
  	{
  	    if(expectedParams > paraCount)
  	    {
            throw new YAPLException("too few arguments for procedure " + symbol.getName(), CompilerError.TooFewArgs, token);
  	    }// too few arguments for procedure <name>
  		return attrib;
  	}
}

void Assignment() throws YAPLException:
{
	Token token2, token3;
	Attrib attrib, value;
}
{
    token2 = < IDENT >
    {
    	Symbol symbol = symbolTable.lookup(token2.image);
    	attrib = new AttribImpl(symbol);

    	if (symbol == null) {
    		throw new YAPLException("identifier " + token2.image + " not declared", CompilerError.IdentNotDecl, token2);
    	}

    	if (symbol.getKind() != Symbol.Variable && symbol.getKind() != Symbol.Parameter) {
    		throw new YAPLException("illegal use of " + symbol.getKindString() + " " + symbol.getName(), CompilerError.SymbolIllegalUse, token2);
    	}

    }
    [ attrib = Selector(attrib) ] token3 = ":=" value = Expr()
    {
     	try { 
      		codeGen.assign(attrib, value);
     	} catch (YAPLException e) {
     	  	throw new YAPLException(e.getMessage(), e.errorNumber(), token3);
     	}
    }
}

void IfStatement() throws YAPLException:
{
	Attrib attrib;
	Token token;
}
{
    token = "If" attrib = Expr()
    {
    	if (!(attrib.getType() instanceof BoolType)) {
    	  	throw new YAPLException("Condition not boolean expression", CompilerError.CondNotBool, token);
    	}
    	
    } "Then" StatementList() [ "Else" StatementList() ] "EndIf"
}

void WhileStatement() throws YAPLException:
{
	Attrib attrib;
	Token token;
}
{
    token = "While" attrib = Expr()
    {
    	if (!(attrib.getType() instanceof BoolType)) {
    	  	throw new YAPLException("Condition not boolean expression", CompilerError.CondNotBool, token);
    	}
    }
    "Do" StatementList() "EndWhile"
}

boolean ReturnStatement() throws YAPLException:
{
	Attrib attrib = null;
	Token token2;
	Token token3 = token;
	Symbol procedure = symbolTable.getNearestParentSymbol(Symbol.Procedure);
    Attrib procAttrib = null;
    if(procedure != null)
    {
          procAttrib =   new AttribImpl(procedure.getType());
    }
}
{
    token2 = "Return" [ attrib = Expr()
    {
        token3 = token;
    	if (attrib.getType() instanceof VoidType || procAttrib != null && procAttrib.getType() instanceof VoidType) {
    	  	throw new YAPLException("Return value must not be void", CompilerError.IllegalRetValProc, token2);
    	} else if(procAttrib == null && !(attrib.getType() instanceof VoidType))
        {
            throw new YAPLException("illegal return value in main program", CompilerError.IllegalRetValMain, token3);
        }

    }
    ]
    {
        if(procAttrib != null)
        {
            if(attrib != null )
            {
                if(!procAttrib.getType().equals(attrib.getType()))
                {
                    throw new YAPLException("returning none or invalid type from function " + procedure.getName(), CompilerError.InvalidReturnType, token3);
                }
            }else if(!(procAttrib.getType() instanceof VoidType))
            {
                throw new YAPLException("returning none or invalid type from function " + procedure.getName(), CompilerError.InvalidReturnType, token);
            }
        }


        return true;
    }
}

void WriteStatement() :
{}
{
    "Write" < STRING >
}

boolean Statement() throws YAPLException:
{
    boolean isReturnStatement = false;
    }
{
    (IfStatement() | WhileStatement() | isReturnStatement = ReturnStatement() | WriteStatement() | LOOKAHEAD(2) Assignment() |  LOOKAHEAD(2) ProcedureCall(false) | Block(false))
    {
        return isReturnStatement;
    }
}

boolean StatementList() throws YAPLException:
{
    boolean lastStatementIsReturnStatement = false;
    }
{
    ( lastStatementIsReturnStatement = Statement() ";" )*
    {
        return lastStatementIsReturnStatement;
    }
}

void Block(boolean endsWithReturn) throws YAPLException:
{
    boolean lastStatementIsReturnStatement = false;
    }
{
    {
    	symbolTable.openScope(false);
    }
    [ Decl() ] "Begin" lastStatementIsReturnStatement = StatementList()
    "End"
    {
        if(endsWithReturn && !lastStatementIsReturnStatement)
        {
            Symbol procedure = symbolTable.getNearestParentSymbol(Symbol.Procedure);
            throw new YAPLException("missing Return statement in function " + procedure.getName(), CompilerError.MissingReturn, token);
        }
    	symbolTable.closeScope();
    }
}

/*
NonArrayType = "int" | "bool" | ident .
*/

Type NonArrayType() throws YAPLException:
{
	Token token;
	Attrib attrib = null;
}
{
	( "int"
	{
		return new IntType();
	} | "bool"
	{
	  	return new BoolType();
	}
	| token = <IDENT>
	{
		Symbol symbol = symbolTable.lookup(token.image);
		attrib = new AttribImpl(symbol);
  		
    	if (symbol == null) {
    		throw new YAPLException("identifier " + token.image + " not declared", CompilerError.IdentNotDecl, token);
    	}

    	if (symbol.getKind() == Symbol.Constant) {
    		throw new YAPLException("illegal use of constant " + symbol.getName(), CompilerError.SymbolIllegalUse, token);
    	}
    	
    	return attrib.getType();
	}
	)
}

Type Type() throws YAPLException:
{
	Type type;
}
{
    type = NonArrayType() ( "[" "]"
    {
    	type = new ArrayType(type);
    } )*
    {
    	return type;
    }
}

Type ReturnType() throws YAPLException:
{
	Type type;
}
{
    "void"
    {
    	return new VoidType();
    } | type = Type()
    {
    	return type;
   	}
}

void ConstDecl() throws YAPLException:
{
  	Symbol symbol;
	Token token;
	Attrib attrib;
}
{
    "Const" token = <IDENT>
    {
      	symbol = new SymbolImpl(token.image, Symbol.Constant);
      	
    	try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	} 
    }
    "=" attrib = Literal()
    {
    	symbol.setType(attrib.getType());
    } ";"
}

void VarDecl() throws YAPLException:
{
	Token token;
	Symbol symbol;
	Type type;
}
{
    type = Type() token = <IDENT>
    {
      	symbol = new SymbolImpl(token.image, Symbol.Variable);
      	symbol.setType(type);

      	try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	} 
    }
    ( "," token = <IDENT>
    {
      	symbol = new SymbolImpl(token.image, Symbol.Variable);
    	symbol.setType(type);
    	
		try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	}
    }
    )* ";"
}

void TypeDecl() throws YAPLException:
{
	Token token;
	Type type;
}
{
    "Record" token = <IDENT>
    {
    	Symbol symbol = new SymbolImpl(token.image, Symbol.Typename);
    	type = new RecordType(symbol);
    	symbol.setType(type);

      	try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	}

    	symbolTable.openScope(false);
      	symbolTable.setParentSymbol(symbol);
    }
    VarDecl() ( VarDecl() )* "EndRecord"
    {
    	symbolTable.closeScope();
    } ";"
}

void Decl() throws YAPLException:
{}
{
    "Declare" ( ConstDecl() | VarDecl() | TypeDecl() )*
}

void FormalParam() throws YAPLException:
{
  	Type type;
	Token token;
}
{
    type = Type() token = <IDENT>
    {
    	Symbol symbol = new SymbolImpl(token.image, Symbol.Parameter);
    	symbol.setType(type);
    	
		try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	} 
    }
}

void FormalParamList() throws YAPLException:
{}
{
    FormalParam() ( "," FormalParam() )*
}

Attrib Procedure() throws YAPLException :
{
  	Attrib attrib;
  	Type returnType;
  	Token start_proc;
  	Token end_proc;
  	boolean isVoidReturnType;
}
{
    "Procedure" returnType = ReturnType() start_proc = <IDENT>
    {
    	Symbol symbol = new SymbolImpl(start_proc.image, Symbol.Procedure);
		attrib = new AttribImpl(returnType);
		symbol.setType(returnType);
		isVoidReturnType = returnType instanceof VoidType;
    	
    	try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	}

    	symbolTable.openScope(false);
    	symbolTable.setParentSymbol(symbol);
    }
     "(" [ FormalParamList() ] ")" Block(!isVoidReturnType) end_proc = <IDENT>
     {
       	if (!start_proc.image.equals(end_proc.image))
       		throw new YAPLException("End " + end_proc.image + " does not match Procedure " + start_proc.image, CompilerError.EndIdentMismatch, end_proc);
     	symbolTable.closeScope();
     } ";"
     {
     	return attrib;
     }
}

void Program() throws YAPLException:
{
 	Token start_prog;
  	Token end_prog;
}
{
    "Program" start_prog = <IDENT>
    {
    	programName = start_prog.toString();
    	Symbol symbol = new SymbolImpl(start_prog.image, Symbol.Program);
		symbolTable.openScope(true);
    	symbolTable.setParentSymbol(symbol);
    }
    (Decl() | Procedure())*
    "Begin"
     StatementList()
     "End" end_prog = <IDENT>
    {
    	if (!start_prog.image.equals(end_prog.image))
       		throw new YAPLException("End " + end_prog.image + " does not match Program " + start_prog.image, CompilerError.EndIdentMismatch, end_prog);
    } "."
}

void PreDefinedProcedures() throws YAPLException:
{}
{
  	(PreDefinedProcedure())*
}

Attrib PreDefinedProcedure() throws YAPLException:
{
  	Type type;
  	Attrib attrib;
	Token token;
} 
{
	"Procedure" type = ReturnType() token = <IDENT>
    {
    	Symbol symbol = new SymbolImpl(token.image, Symbol.Procedure);
		attrib = new AttribImpl(type);
		symbol.setType(type);
    	symbolTable.openScope(true);
    	
    	try { 
    		symbolTable.addSymbol(symbol);
    	} catch (YAPLException e) {
    	  	throw new YAPLException(e.getMessage(), CompilerError.SymbolExists, token);
    	}

    	symbolTable.setParentSymbol(symbol);
    }
    "(" [ FormalParamList() ] ")"
    ";"
    {
    	return attrib;
    }
}

void Start() throws YAPLException:
{}
{
    Program() <EOF>
}